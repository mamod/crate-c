"var sock = process.socket;\n"
"var crate_db = {};\n"
"var NO_PIPE = sock.MSG_NOSIGNAL ? sock.MSG_NOSIGNAL : 0;\n"
"/* global statements */\n"
"crate_db.statements_num = 1;\n"
"crate_db.statements = {};\n"
"var  EWOULDBLOCK = errno.EWOULDBLOCK;\n"
"var ERRORS = {\n"
"    4000   : \"The statement contains an invalid syntax or unsupported SQL statement\",\n"
"    4001   : \"The statement contains an invalid analyzer definition.\",\n"
"    4002   : \"The name of the table is invalid.\",\n"
"    4003   : \"Field type validation failed\",\n"
"    4004   : \"Possible feature not supported (yet)\",\n"
"    4005   : \"Alter table using a table alias is not supported.\",\n"
"    4006   : \"The used column alias is ambiguous.\",\n"
"    4041   : \"Unknown table.\",\n"
"    4042   : \"Unknown analyzer.\",\n"
"    4043   : \"Unknown column.\",\n"
"    4044   : \"Unknown type.\",\n"
"    4045   : \"Unknown schema.\",\n"
"    4046   : \"Unknown Partition.\",\n"
"    4091   : \"A document with the same primary key exists already.\",\n"
"    4092   : \"A VersionConflict. Might be thrown if an attempt was made to update the same document concurrently.\",\n"
"    4093   : \"A table with the same name exists already.\",\n"
"    4094   : \"The used table alias contains tables with different schema.\",\n"
"    5000   : \"Unhandled server error.\",\n"
"    5001   : \"The execution of one or more tasks failed.\",\n"
"    5002   : \"one or more shards are not available.\",\n"
"    5003   : \"the query failed on one or more shards\",\n"
"    5030   : \"the query was killed by a kill statement\"\n"
"};\n"
"crate_db.connect = function (resultObject){\n"
"    if (!crate.options){\n"
"        crate.options = {\n"
"            keepAlive : 6000,\n"
"            servers : [\n"
"                '127.0.0.1:4200'\n"
"            ]\n"
"        };\n"
"    }\n"
"    if (!crate_db.fd){\n"
"        var peeraddr = sock.pton('127.0.0.1', 4200);\n"
"        if (peeraddr === null){\n"
"            resultObject.errorMsg = \"couldn't construct an address from ip ...\";\n"
"            resultObject.errorCode = process.errno;\n"
"            return null;\n"
"        }\n"
"        var fd = sock.socket(sock.AF_INET, sock.SOCK_STREAM, 0);\n"
"        if (!sock.nonblock(fd, 1)){\n"
"            throw new Error('sock block');\n"
"        }\n"
"        var conn = sock.connect(fd, peeraddr);\n"
"        var ret  = sock.can_write(fd, 6000);\n"
"        if (ret === null || ret === 0){\n"
"            sock.close(fd);\n"
"            resultObject.errorMsg = \"connection timed out\";\n"
"            resultObject.errorCode = process.errno;\n"
"            return null;\n"
"        }\n"
"        crate_db.fd = fd;\n"
"        crate_db.peeraddr = peeraddr;\n"
"    }\n"
"    return crate_db.fd;\n"
"};\n"
"crate_db.execute_sql = function(sql, args, resultObject){\n"
"    resultObject = resultObject || crate_db;\n"
"    resultObject.sql_query = sql;\n"
"    var query = { stmt : sql };\n"
"    if (args){ query.args = args; }\n"
"    var query_string = JSON.stringify(query);\n"
"    var req  =  \"POST /_sql HTTP/1.1\\r\\n\";\n"
"        req += \"Content-Length: \" +  query_string.length + \"\\r\\n\";\n"
"        req += \"\\r\\n\";\n"
"        req += query_string;\n"
"    \n"
"    \n"
"    var fd = crate_db.connect(resultObject);\n"
"    if (fd === null){\n"
"        return -1;\n"
"    }\n"
"    \n"
"    var readlength = 8 * 1024;\n"
"    /* WRITING */\n"
"    while (1){\n"
"        var can_write = sock.can_write(fd, 6000);\n"
"        if (can_write === null){\n"
"            if (process.errno === EWOULDBLOCK){\n"
"                continue;\n"
"            }\n"
"        } else if (can_write === 0){\n"
"            resultObject.errorMsg  = \"write timed out.\";\n"
"            resultObject.errorCode = process.errno;\n"
"            return -1;\n"
"        }\n"
"        var sent = sock.send(fd, req, req.length, NO_PIPE);\n"
"        if (sent === null){\n"
"            if (process.errno === EWOULDBLOCK){\n"
"                continue;\n"
"            }\n"
"            //error, do we have other servers pool\n"
"        } else if (sent < req.length){\n"
"            req = req.substr(sent);\n"
"            continue;\n"
"        }\n"
"        break;\n"
"    }\n"
"    /* READING */\n"
"    var response = '';\n"
"    while (1){\n"
"        var can_read = sock.can_read(fd, 6000);\n"
"        if (can_read === null){\n"
"            if (process.errno === EWOULDBLOCK){\n"
"                continue;\n"
"            }\n"
"        } else if (can_read === 0){\n"
"            //timed out\n"
"            resultObject.errorMsg  = \"Socket read timed out\";\n"
"            resultObject.errorCode = process.errno;\n"
"            return -1;\n"
"        }\n"
"        var data = sock.recv(fd, readlength);\n"
"        if (data === null){\n"
"            if (process.errno === EWOULDBLOCK){\n"
"                continue;\n"
"            }\n"
"            if (process.errno === errno.EOF){\n"
"                break;\n"
"            } else {\n"
"                resultObject.errorMsg  = \"Error reading data from crate server\";\n"
"                resultObject.errorCode = process.errno;\n"
"                return -1;\n"
"            }\n"
"        }\n"
"        response += data || '';\n"
"        //FIXME this indicates a partial read, should we\n"
"        //check again until we get EOF?!\n"
"        if (data.length === 0 || data.length < readlength){\n"
"            break\n"
"        }\n"
"    }\n"
"    \n"
"    var res = response.split(\"\\r\\n\\r\\n\");\n"
"    // print(res[1]);\n"
"    //wrap response parsing in try catch block\n"
"    //because we might get a malformed body\n"
"    //and parsing just failed\n"
"    var responseBody;\n"
"    try {\n"
"        responseBody = JSON.parse(res[1]);\n"
"    } catch (e){\n"
"        resultObject.errorMsg  = \"Can't parse response body\";\n"
"        resultObject.errorCode = 0;\n"
"        return -1;\n"
"    }\n"
"    //error\n"
"    if (responseBody.error){\n"
"        var errCode = responseBody.error.code;\n"
"        var errMessage = responseBody.error.message || '';\n"
"        var error = ERRORS[errCode] ? ERRORS[errCode] + \" \" : \"\";\n"
"        //extending error message with better explanation\n"
"        var extendedError = (errMessage.match(/\\[(.*?)\\]/))[0];\n"
"        // print(extendedError);\n"
"        resultObject.errorMsg = error + extendedError;\n"
"        resultObject.errorCode = errCode;\n"
"        return -1;\n"
"    }\n"
"    resultObject.headers = res[0];\n"
"    resultObject.raw     = res[1];\n"
"    resultObject.data    = JSON.parse(res[1]);\n"
"    resultObject.cols    = resultObject.data.cols || [];\n"
"    //parse field names into object\n"
"    resultObject.colNames = {};\n"
"    for (var i = 0; i < resultObject.cols.length; i++){\n"
"        resultObject.colNames[resultObject.cols[i]] = i;\n"
"    }\n"
"    return  resultObject.data.rowcount;\n"
"};\n"
"crate_db.error_message = function(stmt){\n"
"    /* we need global error not statement specific */\n"
"    if (stmt === null){\n"
"        return crate_db.errorMsg;\n"
"    }\n"
"    var statement = crate_db.statements[stmt];\n"
"    return statement.errorMsg;\n"
"};\n"
"crate_db.error_code = function(stmt){\n"
"    /* we need global error not statement specific */\n"
"    if (stmt === null){\n"
"        return crate_db.errorCode;\n"
"    }\n"
"    var statement = crate_db.statements[stmt];\n"
"    return statement.errorCode;\n"
"};\n"
"crate_db.close = function(){\n"
"    if (crate_db.fd){\n"
"        sock.close(crate_db.fd);\n"
"    }\n"
"};\n"
"crate_db.stmt_init  = function(){\n"
"    var num = crate_db.statements_num++;\n"
"    crate_db.statements[num] = {\n"
"        binds : []\n"
"    };\n"
"    return num;\n"
"};\n"
"crate_db.stmt_query  = function(id, val){\n"
"    var statement = crate_db.statements[id];\n"
"    statement.query = val;\n"
"    return 1;\n"
"};\n"
"crate_db.stmt_bind  = function(id, val){\n"
"    var statement = crate_db.statements[id];\n"
"    statement.binds.push(val);\n"
"    return 1;\n"
"};\n"
"crate_db.stmt_execute  = function(id){\n"
"    var statement = crate_db.statements[id];\n"
"    var ret = crate_db.execute_sql(statement.query, statement.binds, statement);\n"
"    //reset binds\n"
"    statement.binds = [];\n"
"    return ret;\n"
"};\n"
"crate_db.stmt_close  = function(id){\n"
"    delete crate_db.statements[id];\n"
"    return 1;\n"
"};\n"
"crate_db.stmt_get_row_data = function(id, i, field){\n"
"    var statement = crate_db.statements[id];\n"
"    var fieldIndex = statement.colNames[field];\n"
"    var data = statement.data;\n"
"    var t = data.rows[i][fieldIndex];\n"
"    return t;\n"
"};\n"
"crate_db.get_row_data = function(i, field){\n"
"    var fieldIndex = crate_db.colNames[field];\n"
"    var data = crate_db.data;\n"
"    var t = data.rows[i][fieldIndex];\n"
"    return t;\n"
"};\n"
""
